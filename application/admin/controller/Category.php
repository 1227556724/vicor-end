<?php

namespace app\admin\controller;

use think\Controller;
use think\Db;
use think\Exception;
use think\Request;
use think\JWT;
class Category extends Controller
{
    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        checkJWT();
    }

    public function index()
    {
        //
//        $data=[
//            ['cid'=>1,'cname'=>'沙发','pid'=>0,
//                'children'=>[
//                    ['cid'=>3,'cname'=>'皮沙发','pid'=>1],
//                    ['cid'=>4,'cname'=>'布沙发','pid'=>1],
//                    ['cid'=>5,'cname'=>'软沙发','pid'=>1],
//                    ['cid'=>6,'cname'=>'硬沙发','pid'=>1]
//                ]],
//            ['cid'=>2,'cname'=>'茶几','pid'=>0,
//                'children'=>[
//                    ['cid'=>7,'cname'=>'大理石茶几','pid'=>2],
//                    ['cid'=>8,'cname'=>'玻璃茶几','pid'=>2],
//                    ['cid'=>9,'cname'=>'塑料茶几','pid'=>2],
//                    ['cid'=>10,'cname'=>'硬茶几','pid'=>2]
//                ]],
//
//        ];
        $data=Db::table('category')->order('cid','asc')->select();
//        通过递归函数的方式拿到二维的数组，但需要返回的格式是数组套对象的格式，
        function tree($cate,$pid){
            $arr=[];
            for ($i=0;$i<count($cate);$i++){
                $current=$cate[$i];
                if($current['pid']==$pid){
                    $children=tree($cate,$current['cid']);
                    if(count($children)){
                        $current['children']=$children;
                    }
                    array_push($arr,$current);
                }
            }
            return $arr;
        }
        $catetree= tree($data,0);

        return json([
            'code'=>config('code.success'),
            'msg'=>'数据请求成功',
            'data'=>$catetree
        ]);
    }

    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        //
    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request  $request
     * @return \think\Response
     */
    public function save(Request $request)
    {
        //
        $data=$this->request->post();
        $validate=validate('Category');
        if(!$validate->check($data)){
            return json([
                'code'=>config('code.fail'),
                'msg'=>$validate->getError()
            ]);
        }
        try{
            $result=Db::table('category')->insertGetId($data);
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'分类添加成功',
                    'id'=>$result
                ]);
            }else{
                return json([
                    'code'=>config('code.fail'),
                    'msg'=>'分类添加失败',
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fail'),
                'msg'=>'分类添加失败',
            ]);
        }
    }

    /**
     * 显示指定的资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function read($id)
    {
        //
        $result=Db::table('category')->where('cid',$id)->find();
        if($result){
            return json([
                'code'=>config('code.success'),
                'msg'=>'',
                'data'=>$result
            ]);
        }else{
            return json([
                'code'=>config('code.fail'),
                'msg'=>'数据获取失败',
            ]);
        }
    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function edit($id)
    {

        //
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request  $request
     * @param  int  $id
     * @return \think\Response
     */
    public function update(Request $request, $id)
    {
        //
        $data=$this->request->put();
        if($data['pid']=='沙发'){
            $data['pid']=1;
        }else if ($data['pid']=='茶几'){
            $data['pid']=2;
        }else if ($data['pid']=='冰箱'){
            $data['pid']=4;
        }
        $validate=validate('Category');
        if(!$validate->check($data)){
            return json([
                'code'=>config('code.fail'),
                'msg'=>$validate->getError()
            ]);
        }
        $result=Db::table('category')->order('sort','desc')->where('cid',$id)->update($data);

        if($result){
            return json([
                'code'=>config('code.success'),
                'msg'=>'修改成功'
            ]);
        }else{
            return json([
                'code'=>config('code.fail'),
                'msg'=>'修改失败'
            ]);
        }
    }

    /**
     * 删除指定资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function delete($id)
    {
        //
        $data=Db::table('category')->where('pid',$id)->select();
        if($data){
            return json([
                'code'=>config('code.fail'),
                'msg'=>'父目录下有子目录，不允许删除'
            ]);
        }

        $result=Db::table('category')->where('cid',$id)->delete();
        if($result){
            return json([
                'code'=>config('code.success'),
                'msg'=>'删除成功'
            ]);
        }else{
            return json([
                'code'=>config('code.fail'),
                'msg'=>'删除失败'
            ]);
        }
    }
}
